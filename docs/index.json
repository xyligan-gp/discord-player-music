{
 "meta": {
  "generator": "0.11.1",
  "format": 22,
  "date": 1659013925044
 },
 "custom": {
  "general": {
   "name": "General",
   "files": {
    "welcome": {
     "name": "Welcome",
     "type": "md",
     "content": "<div align=\"center\">\r\n\t<h1>Welcome to the 'discord-player-music' page!</h1>\r\n\t<br />\r\n\t<p>\r\n\t\t<a href=\"https://dpm.js.org\"><img src=\"https://i.imgur.com/4Pk9WlS.gif\" width=\"546\" alt=\"DPM Main Image\" /></a>\r\n\t</p>\r\n\t<br/>\r\n\t<p>\r\n\t\t<a href=\"https://discord.gg/zzbkvCcu2r\"><img src=\"https://img.shields.io/discord/827221018879328298?color=5865F2&logo=discord&logoColor=white\" alt=\"Support Server\" /></a>\r\n\t\t<a href=\"https://www.npmjs.com/package/discord-player-music\"><img src=\"https://img.shields.io/npm/dt/discord-player-music.png?maxAge=3600\" alt=\"NPM downloads\" /></a>\r\n\t\t<a href=\"https://www.npmjs.com/package/discord-player-music\"><img src=\"https://img.shields.io/npm/v/discord-player-music.png?maxAge=3600\" alt=\"NPM page\" /></a>\r\n\t</p>\r\n</div>\r\n\r\n## About\r\n\r\n**Discord Player Music is a powerful [Node.js](https://nodejs.org) music module for your Discord.js bot that based on Promises and has a lot of features.**\r\n\r\n* üëç Simple & easy to use\r\n* üòÑ Beginner friendly\r\n* üé∏ Audio filters\r\n* üìå Guilds Playlists\r\n* üìÉ Lyrics\r\n* üìÇ Multiple servers\r\n\r\n## Installation\r\n\r\n**Node.js 16.9.0 or newer is required.**\r\n\r\n```sh-session\r\n$ npm install discord-player-music\r\n$ yarn add discord-player-music\r\n$ pnpm add discord-player-music\r\n```\r\n\r\n## Example Usage\r\n\r\n```js\r\nconst { Client, GatewayIntentBits, Partials } = require('discord.js');\r\nconst { Player } = require('discord-player-music');\r\n\r\nconst client = new Client({\r\n\tintents: [\r\n\t\tGatewayIntentBits.Guilds,\r\n\t\tGatewayIntentBits.MessageContent,\r\n\t\tGatewayIntentBits.GuildMembers,\r\n\t\tGatewayIntentBits.GuildMessages,\r\n\t\tGatewayIntentBits.GuildMessageReactions,\r\n\t\tGatewayIntentBits.GuildVoiceStates\r\n\t],\r\n    \r\n\tpartials: [\r\n\t\tPartials.Channel,\r\n\t\tPartials.GuildMember,\r\n\t\tPartials.Message,\r\n\t\tPartials.Reaction,\r\n\t\tPartials.User\r\n\t]\r\n});\r\n\r\nclient.player = new Player(client);\r\n\r\nclient.on('ready', async () => {\r\n  \treturn console.log('Client is ready!');\r\n})\r\n\r\nclient.player.on('ready', async () => {\r\n\treturn console.log('Player is ready!');\r\n})\r\n\r\nclient.login('YOUR_CLIENT_TOKEN_HERE');\r\n```\r\n\r\n## Links\r\n\r\n* NPM: [Open](https://www.npmjs.com/package/discord-player-music)\r\n* GitHub: [Open](https://github.com/xyligan-gp/discord-player-music)\r\n* Examples: [See](https://github.com/xyligan-gp/discord-player-music/tree/stable/examples)\r\n* Documentation: [Open](https://dpm.js.org)\r\n\r\n* Module Developer: [xyligan](https://github.com/xyligan-gp)\r\n* Developer Discord: [‚ô° x“Ø‚Ñì[Œπ]gŒ±Œ∑4Œµg ‚ô°#9457](https://discord.com/users/533347075463577640)\r\n* Support Server: [Join xyligan development](https://discord.gg/zzbkvCcu2r)\r\n\r\n<center><h1>‚ô• Thanks for using Discord Player Music ‚ô•</h1></center>",
     "path": "docs/general/welcome.md"
    },
    "faq": {
     "name": "FAQ",
     "type": "md",
     "content": "# Frequently Asked Questions\r\n\r\nThese questions are some of the most frequently asked.\r\n\r\n## How do I get voice working?\r\n* Install `@discordjs/opus` | Command: `npm install @discordjs/opus`\r\n* Install `@discordjs/voice` | Command: `npm install @discordjs/voice`\r\n\r\n## Why am I getting Status code: 403 error?\r\nThe `Status code: 403` error occurs when there are minor problems with the YouTu be API, but don't worry, if you receive an error, the module will automatically make several retry attempts to play the song. If this fails, you can notify the server users about it and contact the module support server for help.\r\n\r\n## Why am I getting Status code: 404 error?\r\nThe `Status code: 404` error occurs when there are critical problems in the YouTu be API, but do not worry, when you receive an error, the module will automatically notify you about this with an error in the console.\r\n\r\n## Why does the bot sometimes just crash?\r\nIf while trying to play a song your bot received an error and crashed, we recommend that you review the error received and do everything possible to fix it. If all else fails, contact the module support server.",
     "path": "docs/general/faq.md"
    },
    "updating": {
     "name": "Updating your code",
     "type": "md",
     "content": "# Updating page\r\n\r\nThis documentation page is a short list of changes to your code that will have to be done when switching to a specific version of discord-player-music!\r\n\r\n## 1.1.5\r\nIn version 1.1.5, `discord-player-music` was completely rewritten for the manager system.\r\n\r\n### Player Constructor\r\n\r\n```diff\r\n+ options.searchResultsLimit\r\n+ options.synchronLoop\r\n+ options.defaultVolume\r\n\r\n+ options.collectorsConfig.autoAddingSongs\r\n+ options.collectorsConfig.maxAttempts\r\n+ options.collectorsConfig.time\r\n```\r\n\r\n### Player Methods Update\r\n#### CollectorsManager\r\n\r\n```diff\r\n+ player.collectors.message\r\n```\r\n\r\n#### VoiceManager\r\n\r\n```diff\r\n- player.joinVoiceChannel\r\n+ player.voice.join\r\n\r\n- player.leaveVoiceChannel\r\n+ player.voice.leave\r\n```\r\n\r\n#### UtilsManager\r\n\r\n```diff\r\n- player.createStream\r\n+ player.utils.checkNode\r\n+ player.utils.checkOptions\r\n+ player.utils.checkPermissions\r\n+ player.utils.createCollector\r\n```\r\n\r\n#### Main Player\r\n\r\n```diff\r\n- player.getSongIndex\r\n\r\n- player.skipSong\r\n+ player.skip\r\n\r\n- player.stopPlaying\r\n+ player.stop\r\n\r\n- player.pausePlaying\r\n+ player.pause\r\n\r\n- player.resumePlaying\r\n+ player.resume\r\n\r\n- player.getCurrentSongInfo\r\n+ player.getSongInfo\r\n\r\n- player.initPlayer\r\n+ player.init\r\n```\r\n\r\n## 1.1.7\r\nIn version 1.1.7, `discord-player-music` was completely rewritten on TypeScript language.\r\n\r\n### Module Constructor\r\n\r\n```diff\r\n- options.collectorsConfig.autoAddingSongs\r\n- options.collectorsConfig.maxAttempts\r\n- options.collectorsConfig.time\r\n+ options.autoAddingTracks\r\n\r\n+ options.databaseConfig\r\n+ options.databaseConfig.path\r\n+ options.databaseConfig.checkInterval\r\n\r\n+ options.progressConfig\r\n+ options.progressConfig.size\r\n+ options.progressConfig.line\r\n+ options.progressConfig.slider\r\n\r\n+ options.collectorsConfig.message\r\n+ options.collectorsConfig.message.time\r\n+ options.collectorsConfig.message.attempts\r\n\r\n+ options.collectorsConfig.reaction\r\n+ options.collectorsConfig.reaction.time\r\n+ options.collectorsConfig.reaction.attempts\r\n+ options.collectorsConfig.reaction.reactions\r\n```\r\n\r\n### Player Events Update\r\n\r\n```diff\r\n+ player#ready\r\n+ player#queueStarted\r\n+ player#createdPlaylist\r\n+ player#deletedPlaylist\r\n+ player#queueStateChange\r\n\r\n- player#playerError\r\n+ player#error\r\n\r\n- player#songsAdded\r\n+ player#addedTrack\r\n\r\n- player#playingSong\r\n+ player#playingTrack\r\n```\r\n\r\n### Player Methods Update\r\n\r\n#### Main Player Class\r\n\r\n```diff\r\n- player.collectors.message\r\n+ player.createCollector\r\n\r\n- player.play\r\n+ player.initGuildTrack\r\n\r\n- player.searchSong\r\n+ player.search\r\n\r\n- player.addSong\r\n+ player.initQueueTrack\r\n\r\n- player.pause\r\n- player.resume\r\n+ player.queue.setState\r\n\r\n- player.setLoopSong\r\n- player.setLoopQeue\r\n+ player.queue.setLoop\r\n\r\n- player.skip\r\n+ player.queue.skipTrack\r\n\r\n- player.setFilter\r\n+ player.queue.setFilter\r\n\r\n- player.shuffle\r\n+ player.queue.shuffle\r\n\r\n- player.getGuildMap\r\n- player.getQueue\r\n+ player.queue.get\r\n\r\n- player.getSongInfo\r\n+ player.queue.trackInfo\r\n+ player.queue.streamInfo\r\n\r\n- player.getLyrics\r\n+ player.lyrics\r\n\r\n- player.getFilters\r\n+ player.filters.list\r\n\r\n- player.createProgressBar\r\n+ player.queue.progress\r\n\r\n- player.setVolume\r\n+ player.queue.setVolume\r\n\r\n- player.stop\r\n+ player.queue.stop\r\n\r\n- player.removeSong\r\n+ player.queue.removeTrack\r\n```\r\n\r\n#### DatabaseManager\r\n\r\n```diff\r\n+ player.database.get\r\n+ player.database.write\r\n+ player.database.initGuild\r\n+ private player.database.init\r\n```\r\n\r\n#### FiltersManager\r\n\r\n```diff\r\n+ player.filters.add\r\n+ player.filters.isExists\r\n+ player.filters.get\r\n+ player.filters.list\r\n+ player.filters.delete\r\n+ private player.filters.init\r\n```\r\n\r\n#### PlaylistsManager\r\n\r\n```diff\r\n+ player.playlists.create\r\n+ player.playlists.addTrack\r\n+ player.playlists.play\r\n+ player.playlists.removeTrack\r\n+ player.playlists.delete\r\n```\r\n\r\n#### QueueManager\r\n\r\n```diff\r\n+ player.queue.add\r\n+ player.queue.get\r\n+ player.queue.progress\r\n+ player.queue.streamInfo\r\n+ player.queue.trackInfo\r\n+ player.queue.setFilter\r\n+ player.queue.setLoop\r\n+ player.queue.setState\r\n+ player.queue.setVolume\r\n+ player.queue.skipTrack\r\n+ player.queue.removeTrack\r\n+ player.queue.seek\r\n+ player.queue.shuffle\r\n+ player.queue.stop\r\n+ player.queue.delete\r\n```\r\n\r\n#### UtilsManager\r\n\r\n```diff\r\n- player.utils.checkNode\r\n- player.utils.checkPermissions\r\n- player.utils.getPlayerMode\r\n+ player.utils.formatDuration\r\n+ player.utils.createEmptyProgress\r\n+ player.utils.getUniqueID\r\n+ player.utils.getTrackDuration\r\n```",
     "path": "docs/general/updating.md"
    },
    "index": {
     "name": "Examples",
     "type": "md",
     "content": "# A small example of writing a music bot using module\r\n\r\nThis is just the smallest part of what can be done. More examples can be found here: **[discord-player-music/examples](https://github.com/xyligan-gp/discord-player-music/tree/stable/examples)**\r\n\r\n## Client and module initialization\r\n\r\n```js\r\nimport { Collector, GuildQueueState, Loop, Player, Search } from 'discord-player-music';\r\nimport { Client, EmbedBuilder, GatewayIntentBits, Partials, TextChannel, VoiceChannel } from 'discord.js';\r\n\r\nimport { FilterType, LyricsData, PlayerQueue } from 'discord-player-music/types/PlayerData';\r\n\r\nconst client = new Client({\r\n    intents: [\r\n        GatewayIntentBits.Guilds,\r\n        GatewayIntentBits.GuildMembers,\r\n        GatewayIntentBits.GuildMessageReactions,\r\n        GatewayIntentBits.GuildMessages,\r\n        GatewayIntentBits.GuildVoiceStates,\r\n        GatewayIntentBits.MessageContent\r\n    ],\r\n\r\n    partials: [\r\n        Partials.Channel,\r\n        Partials.GuildMember,\r\n        Partials.Message,\r\n        Partials.Reaction,\r\n        Partials.User\r\n    ]\r\n})\r\n\r\nconst defaultPrefix = '!';\r\nconst player = new Player(client);\r\n\r\nclient.on('ready', async () => {\r\n    return console.log(`${client.user?.tag} is ready!`);\r\n})\r\n\r\nclient.login('YOUR_CLIENT_TOKEN_HERE');\r\n```\r\n\r\n## Bot command initialization\r\n```js\r\nclient.on('messageCreate', async message => {\r\n    const msgChannel = message.channel as TextChannel;\r\n    const messageArray = message.content.split(' ');\r\n    const command = messageArray[0];\r\n})\r\n```\r\n\r\n## Writing bot commands\r\n\r\n### Search command\r\n```js\r\nif(command === `${defaultPrefix}search`) {\r\n    const searchQuery = message.content.substring(defaultPrefix.length + 7);\r\n\r\n    if(!message.member?.voice.channel) {\r\n        message.channel.send({ content: `${message.member}, join to the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    if(!searchQuery) {\r\n        message.channel.send({ content: `${message.member}, enter your search query!` });\r\n        return;\r\n    }\r\n        \r\n    const searchData = await player.search(searchQuery, message.member, msgChannel);\r\n        \r\n    if(searchData?.error) {\r\n        console.log(searchData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else{\r\n        if(searchData[0].searchType.includes(Search.TITLE)) {\r\n            const embed = new EmbedBuilder()\r\n                \r\n            .setColor('Blue')\r\n            .setTitle('Select track:')\r\n            .setThumbnail(client.user?.avatarURL() as string)\r\n            .setDescription(searchData.map((track, index) => `\\`[${index + 1}]\\` **[${track.title}](${track.url})** \\`[${track.duration.hours}:${track.duration.minutes}:${track.duration.seconds}]\\``).join('\\n'))\r\n\r\n            const msg = await message.channel.send({ embeds: [embed] });\r\n\r\n            player.createCollector(Collector.REACTION, msg, searchData, message.author.id);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Lyrics command\r\n```js\r\nif(command === `${defaultPrefix}lyrics`) {\r\n    const searchQuery = message.content.substring(defaultPrefix.length + 7);\r\n\r\n    if(!searchQuery) {\r\n        message.channel.send({ content: `${message.member}, enter your search query!` });\r\n        return;\r\n    }\r\n\r\n    const searchData = await player.lyrics(searchQuery);\r\n\r\n    if(searchData?.error) {\r\n        console.log(searchData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else{\r\n        const lyricsData = searchData as LyricsData;\r\n\r\n        if((lyricsData.result.length + lyricsData.query.length) <= 2048) message.channel.send({ content: `Search Query: **${lyricsData.query}**\\n\\n${lyricsData.result}` })\r\n        else message.channel.send({ content: `${message.member}, result content exceeds 2048 characters!` });\r\n    }\r\n}\r\n```\r\n\r\n### Queue command\r\n\r\n```js\r\nif(command === `${defaultPrefix}queue`) {\r\n    const guildQueue = await player.queue.get(msgChannel.guild.id);\r\n\r\n    if(guildQueue?.error) {\r\n        console.log(guildQueue.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else{\r\n        const queue = guildQueue as PlayerQueue;\r\n\r\n        const embed = new EmbedBuilder()\r\n\r\n        .setColor('Blue')\r\n        .setTitle(`Guild Queue: ${queue.tracks.length}`)\r\n        .setThumbnail(client.user?.avatarURL() as string)\r\n        .setDescription(queue.tracks.map((track, index) => `\\`[${index + 1}]\\` **[${track.title}](${track.url})** \\`[${track.duration.hours}:${track.duration.minutes}:${track.duration.seconds}]\\``).join('\\n'))\r\n\r\n        message.channel.send({ embeds: [embed] });\r\n    }\r\n}\r\n```\r\n\r\n### Stop command\r\n\r\n```js\r\nif(command === `${defaultPrefix}stop`) {\r\n    if(!message.member?.voice.channel) {\r\n        message.channel.send({ content: `${message.member}, join to the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    const stopData = await player.queue.stop(msgChannel.guild.id);\r\n\r\n    if(stopData?.error) {\r\n        console.log(stopData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else message.channel.send({ content: `${message.member}, server queue playing completed successfully!` });\r\n}\r\n```\r\n\r\n### Skip command\r\n\r\n```js\r\nif(command === `${defaultPrefix}skip`) {\r\n    if(!message.member?.voice.channel) {\r\n        message.channel.send({ content: `${message.member}, join to the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    const skipData = await player.queue.skipTrack(msgChannel.guild.id);\r\n\r\n    if(skipData?.error) {\r\n        console.log(skipData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else{\r\n        if(skipData.next != null) message.channel.send({ content: `Skip track '${skipData.current.title}' and start playing '${skipData.next.title}'!` });\r\n        else message.channel.send({ content: `Skip track '${skipData.current.title}'!` });\r\n    }\r\n}\r\n```\r\n\r\n### Seek command\r\n\r\n```js\r\nif(command === `${defaultPrefix}seek`) {\r\n    const seekValue = Number(message.content.substring(defaultPrefix.length + 5));\r\n        \r\n    if(!message.member?.voice.channel) {\r\n        message.channel.send({ content: `${message.member}, join to the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    if(seekValue && isNaN(seekValue)) {\r\n        message.channel.send({ content: `` });\r\n        return;\r\n    }\r\n        \r\n    const seekData = await player.queue.seek(msgChannel.guild.id, seekValue || 0);\r\n\r\n    if(seekData?.error) {\r\n        console.log(seekData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else message.channel.send({ content: `The current track has been successfully rewound by ${seekValue} seconds!` });\r\n}\r\n```\r\n\r\n### Filter command\r\n\r\n```js\r\nif(command === `${defaultPrefix}filter`) {\r\n    const filter = message.content.substring(defaultPrefix.length + 7) as FilterType;\r\n\r\n    if(!message.member?.voice.channel) {\r\n        message.channel.send({ content: `${message.member}, join to the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    if(filter && !await player.filters.isExists(filter)) {\r\n        message.channel.send({ content: `${message.member}, you have specified an unknown filter!` });\r\n    }else{\r\n        const filterData = await player.queue.setFilter(msgChannel.guild.id, filter || 'clear');\r\n\r\n        if(filterData?.error) {\r\n            console.log(filterData.error);\r\n\r\n            message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n        }else message.channel.send({ content: `Playback filter **${filterData.name}** installed successfully!` });\r\n    }\r\n}\r\n```\r\n\r\n### Join command\r\n\r\n```js\r\nif(command === `${defaultPrefix}join`) {\r\n    const channelName = message.content.substring(defaultPrefix.length + 5);\r\n\r\n    if(!channelName) {\r\n        message.channel.send({ content: `${message.member}, enter the name of the voice channel!` });\r\n        return;\r\n    }\r\n\r\n    const channel = message.guild?.channels.cache.find(c => c.name === channelName);\r\n\r\n    if(channel && channel.isVoiceBased()) {\r\n        const joinData = await player.voice.join(channel as VoiceChannel);\r\n\r\n        if(joinData?.error) {\r\n            console.log(joinData.error);\r\n\r\n            message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n        }else message.channel.send({ content: `Member, the bot has successfully joined the ${channel} channel!` });\r\n    }\r\n}\r\n```\r\n\r\n### Leave command\r\n\r\n```js\r\nif(command === `${defaultPrefix}leave`) {\r\n    const leaveData = await player.voice.leave(msgChannel.guild.id);\r\n\r\n    if(leaveData?.error) {\r\n        console.log(leaveData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else message.channel.send({ content: `${message.member}, the bot has successfully left the ${message.guild?.channels.cache.get(leaveData.joinConfig.channelId as string)} voice channel!` });\r\n}\r\n```\r\n\r\n### Nowplaying command\r\n\r\n```js\r\nif(command === `${defaultPrefix}nowplaying`) {\r\n    const trackData = await player.queue.trackInfo(msgChannel.guild.id);\r\n\r\n    if(trackData?.error) {\r\n        console.log(trackData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else{\r\n        const progressData = await player.queue.progress(msgChannel.guild.id);\r\n\r\n        message.channel.send({ content: `Track Title: **${trackData.title}**\\nTrack URL: **${trackData.url}**\\nTrack Duration: **[${trackData.duration.hours}:${trackData.duration.minutes}:${trackData.duration.seconds}]**\\n\\nProgress: [${progressData.percents}] ${progressData.bar}` });\r\n    }\r\n}\r\n```\r\n\r\n### Loop command\r\n\r\n```js\r\nif(command === `${defaultPrefix}loop`) {\r\n    const type = message.content.substring(defaultPrefix.length + 5);\r\n\r\n    if(type) {\r\n        if(!type.includes('track') && !type.includes('queue')) {\r\n            message.channel.send({ content: `${message.member}, you specified an incorrect loop type!` });\r\n        }else{\r\n            const loopData = await player.queue.setLoop(msgChannel.guild.id, type.includes('track') ? Loop.TRACK : Loop.QUEUE);\r\n\r\n            if(loopData?.error) {\r\n                console.log(loopData.error);\r\n\r\n                message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n            }else message.channel.send({ content: `${message.member}, looping status changed successfully!` });\r\n        }\r\n    }else{\r\n        const loopData = await player.queue.setLoop(msgChannel.guild.id, Loop.TRACK);\r\n\r\n        if(loopData?.error) {\r\n            console.log(loopData.error);\r\n\r\n            message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n        }else message.channel.send({ content: `${message.member}, looping status changed successfully!` });\r\n    }\r\n}\r\n```\r\n\r\n### Pause command\r\n\r\n```js\r\nif(command === `${defaultPrefix}pause`) {\r\n    const setStateData = await player.queue.setState(message.guild?.id as string, GuildQueueState.PAUSED);\r\n\r\n    if(setStateData?.error) {\r\n        console.log(setStateData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else message.channel.send({ content: `${message.member}, queue playback successfully paused!` });\r\n}\r\n```\r\n\r\n### Resume command\r\n\r\n```js\r\nif(command === `${defaultPrefix}resume`) {\r\n    const setStateData = await player.queue.setState(message.guild?.id as string, GuildQueueState.PLAYING);\r\n\r\n    if(setStateData?.error) {\r\n        console.log(setStateData.error);\r\n\r\n        message.channel.send({ content: `${message.member}, an error occurred while executing the command, take a look at the console!` });\r\n    }else message.channel.send({ content: `${message.member}, queue playback successfully resumed!` });\r\n}\r\n```\r\n\r\n## Player Events Handling\r\n\r\n### Ready event\r\n\r\n```js\r\nplayer.on('ready', async () => {\r\n    return console.log(`\\nPlayer by ${player.author} is ready!\\nCurrent package version: ${player.version}\\nPackage website URL: ${player.website}`);\r\n})\r\n```\r\n\r\n### Error event\r\n\r\n```js\r\nplayer.on('error', async errorData => {\r\n    return console.log(errorData);\r\n})\r\n```\r\n\r\n### QueueStarted event\r\n\r\n```js\r\nplayer.on('queueStarted', async queue => {\r\n    const channel = queue.channel.text;\r\n\r\n    return channel.send({ content: `Queue for server with ID '${channel.guild.id}' started!` });\r\n})\r\n```\r\n\r\n### CreatedPlaylist event\r\n\r\n```js\r\nplayer.on('createdPlaylist', async playlist => {\r\n    return console.log(`Playlist with id ${playlist.id} success created!`);\r\n})\r\n```\r\n\r\n### DeletedPlaylist event\r\n\r\n```js\r\nplayer.on('deletedPlaylist', async playlist => {\r\n    return console.log(`Playlist with id ${playlist.id} successfully deleted!`);\r\n})\r\n```\r\n\r\n### PlayingTrack event\r\n\r\n```js\r\nplayer.on('playingTrack', async track => {\r\n    const channel = track.channel.text;\r\n\r\n    return channel.send({ content: `Playing '${track.title}' track...` });\r\n})\r\n```\r\n\r\n### AddedTrack event\r\n\r\n```js\r\nplayer.on('addedTrack', async track => {\r\n    const channel = track.channel.text;\r\n\r\n    return channel.send({ content: `Track '${track.title}' added to queue...` });\r\n})\r\n```\r\n\r\n### QueueEnded event\r\n\r\n```js\r\nplayer.on('queueEnded', async queue => {\r\n    const channel = queue.channel.text;\r\n\r\n    return channel.send({ content: `Queue for server with ID '${channel.guild.id}' ended!` });\r\n})\r\n```\r\n\r\n### QueueStateChange event\r\n\r\n```js\r\nplayer.on('queueStateChange', (queue, oldState, newState) => {\r\n    const channel = queue.channel.text;\r\n\r\n    channel.send({ content: `Queue state changed with '${oldState}' on '${newState}'!` });\r\n})\r\n```",
     "path": "docs/general/examples/index.md"
    },
    "changelog": {
     "name": "Changelog",
     "type": "md",
     "content": "# Module Changelog\r\n* ***Version 1.0.0***\r\n  * Release module\r\n* ***Version 1.0.1***\r\n  * Code optimization\r\n  * Fix methods `joinVoiceChannel()` and `leaveVoiceChannel()`\r\n  * Added the `formatNumbers()` method for formatting numbers\r\n  * Fix bugs\r\n  * Fix `README.md`\r\n* ***Version 1.0.2***\r\n  * Code optimization\r\n  * Fixed bug with repeating song/queue\r\n  * Improving the quality of playing songs\r\n  * Added filter system. Method `setFilter()`\r\n  * Changing the returned data by some methods and events\r\n  * Added the `getGuildMap()` method to get the server queue object\r\n* ***Version 1.0.3***\r\n  * Code optimization\r\n  * Fix caught some bugs\r\n  * Fixed minor bugs\r\n  * Rewrite `README.md`\r\n  * Fixed events\r\n* ***Versions 1.0.4 - 1.0.5***\r\n  * Update versions all dependencies\r\n  * Fix `README.md`\r\n* ***Version 1.0.6***\r\n  * Fix module typings\r\n  * Fix minor bugs\r\n  * Added the `getFilters()` method to get arrays with player filters\r\n  * Fix `README.md`\r\n* ***Version 1.0.7***\r\n  * Update versions all dependencies\r\n* ***Version 1.0.8***\r\n  * Fix method `searchVideo()`\r\n  * Added the `getLyrics()` method to get lyrics for current song\r\n* ***Version 1.1.0***\r\n  * Fix filter system\r\n  * Added the `shuffle()` method for shuffling songs in queue\r\n* ***Version 1.1.1***\r\n  * The `playerError` event has started to catch more errors about which users can be warned\r\n  * When receiving an error `Status code: 403`, the module will restart the stream (previously, the stream simply ended)\r\n  * Add the `removeSong()` method for removing songs from the queue\r\n  * Completely rewritten `README.md`\r\n  * Release of module documentation. Link: [dpm-docs](https://dpm-docs.tk)\r\n* ***Version 1.1.2***\r\n  * Updating the documentation for the new design style\r\n  * The module structure has been completely rewritten\r\n  * Added class `Utils`, some methods have been moved to it and marked as `public`\r\n* ***Version 1.1.3***\r\n  * Remove dependency on `<Discord.Message>` completely\r\n  * The `searchVideo()` method has been replaced with `searchSong()`\r\n  * Completely rewritten TypeScript code\r\n  * The `getSongIndex()` and `addSong()` methods have been changed\r\n  * The `playerError` event have been changed\r\n* ***Version 1.1.5***\r\n  * The module structure has been completely rewritten on managers\r\n  * Completely rewritten `README.md`\r\n  * Rewritten TypeScript code\r\n  * Correction of bugs and errors\r\n  * Adding support for `discord.js v13`\r\n  * and many other changes...\r\n* ***Version 1.1.6***\r\n  * Fix Voice Manager\r\n* ***Version 1.1.7***\r\n  * The module has been completely rewritten to the new structure and the TypeScript language\r\n  * Replaced old domain [dpm-docs](https://dpm-docs.tk) with new one [dpm-website](https://dpm.js.org)\r\n  * Added new managers, simplified work with old ones\r\n  * Optimization of module algorithms\r\n  * Added server playlist functionality\r\n  * Removed support for `discord.js v12` and added support for the current `discord.js v14`\r\n  * Updated dependency versions to the latest ones\r\n  * Updated old and added new events\r\n  * Partial transition to enumerated types (enum)\r\n  * The rest of the changes can be seen more clearly on the updates page...",
     "path": "docs/general/changelog.md"
    }
   }
  }
 },
 "classes": [
  {
   "name": "Player",
   "description": "Player Class",
   "extends": [
    [
     [
      "PlayerEmitter"
     ]
    ]
   ],
   "construct": {
    "name": "Player",
    "params": [
     {
      "name": "client",
      "description": "Discord Client",
      "type": [
       [
        [
         "Client"
        ]
       ]
      ]
     },
     {
      "name": "options",
      "description": "Module Options",
      "optional": true,
      "type": [
       [
        [
         "PlayerOptions"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "client",
     "description": "Discord Client",
     "access": "private",
     "type": [
      [
       [
        "Client"
       ]
      ]
     ],
     "meta": {
      "line": 61,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "ready",
     "description": "Player Ready Status",
     "access": "private",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ],
     "meta": {
      "line": 69,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "author",
     "description": "Player Author",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 77,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "website",
     "description": "Player Website URL",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 84,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "version",
     "description": "Player Version",
     "type": [
      [
       [
        "string"
       ]
      ]
     ],
     "meta": {
      "line": 91,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "utils",
     "description": "Player Utils Manager",
     "type": [
      [
       [
        "UtilsManager"
       ]
      ]
     ],
     "meta": {
      "line": 98,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "errors",
     "description": "Player Errors JSON",
     "type": [
      [
       [
        "object"
       ]
      ]
     ],
     "meta": {
      "line": 105,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "options",
     "description": "Player Options",
     "type": [
      [
       [
        "PlayerOptions"
       ]
      ]
     ],
     "meta": {
      "line": 112,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "queue",
     "description": "Player Queue Manager",
     "type": [
      [
       [
        "QueueManager"
       ]
      ]
     ],
     "meta": {
      "line": 119,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "voice",
     "description": "Player Voice Manager",
     "type": [
      [
       [
        "VoiceManager"
       ]
      ]
     ],
     "meta": {
      "line": 126,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "filters",
     "description": "Player Filters Manager",
     "type": [
      [
       [
        "FiltersManager"
       ]
      ]
     ],
     "meta": {
      "line": 133,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "database",
     "description": "Player Database Manager",
     "type": [
      [
       [
        "DatabaseManager"
       ]
      ]
     ],
     "meta": {
      "line": 140,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "playlists",
     "description": "Player Playlists Manager",
     "type": [
      [
       [
        "PlaylistsManager"
       ]
      ]
     ],
     "meta": {
      "line": 147,
      "file": "Player.ts",
      "path": "src"
     }
    }
   ],
   "methods": [
    {
     "name": "isReady",
     "description": "Player is ready?",
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Player ready status"
     },
     "meta": {
      "line": 179,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "initGuildTrack",
     "description": "Allows you to initialize the next track for playback",
     "access": "private",
     "examples": [
      "const searchResults = await client.player.search('Query', message.member, message.channel);\rif(searchResults?.error) return message.channel.send({ content: `No results found!` });\r\rclient.player.initGuildTrack('GuildID', searchResults[0]);"
     ],
     "emits": [
      "Player#event:error",
      "Player#event:playingTrack",
      "Player#event:queueEnded"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "track",
       "description": "Track info",
       "type": [
        [
         [
          "PlayerTrack"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "void",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Void or error object"
     },
     "meta": {
      "line": 188,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "search",
     "description": "Allows you to search for tracks in YouTube by link/title",
     "examples": [
      "const searchData = await client.player.search('Xtrullor - Samsara', message.member, message.channel);\r\rconsole.log(searchData);"
     ],
     "params": [
      {
       "name": "query",
       "description": "Search query",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Discord Guild Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "channel",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "isPlaylist",
       "description": "Search type",
       "optional": true,
       "type": [
        [
         [
          "boolean"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Array",
         "<"
        ],
        [
         "PlayerTrack",
         ">|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Array with search results or error object"
     },
     "meta": {
      "line": 290,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "lyrics",
     "description": "Allows you to find lyrics for songs by their name",
     "examples": [
      "const lyricsData = await client.player.lyrics('Imagine Dragons - Thunder');\rif(lyricsData?.result) return message.channel.send({ content: `${lyricsData.query}\\n\\n${lyricsData.result}` });"
     ],
     "params": [
      {
       "name": "query",
       "description": "Track name",
       "type": [
        [
         [
          "String"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "LyricsData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Returns a result or error object"
     },
     "meta": {
      "line": 398,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "initQueueTrack",
     "description": "Allows you to add tracks to the playback queue",
     "examples": [
      "const searchData = await client.player.search('Xtrullor - Samsara', message.member, message.channel);\rif(searchData[0]?.title) client.player.initQueueTrack(1, searchData);"
     ],
     "params": [
      {
       "name": "index",
       "description": "Track index",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "results",
       "description": "Array with search results",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlayerTrack",
          ">"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "void",
         ">"
        ]
       ]
      ],
      "description": "Void"
     },
     "meta": {
      "line": 420,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "createCollector",
     "description": "Allows you to create a collector to select a track from a list",
     "examples": [
      "const searchData = await client.player.search('Xtrullor - Samsara', message.member, message.channel);\rif(searchData[0]?.title && searchData.length === 10) client.player.createCollector(Collector.REACTION, message, searchData, 'UserID');"
     ],
     "params": [
      {
       "name": "type",
       "description": "Collector type",
       "type": [
        [
         [
          "Collector"
         ]
        ]
       ]
      },
      {
       "name": "message",
       "description": "Discord Guild Message",
       "type": [
        [
         [
          "Message"
         ]
        ]
       ]
      },
      {
       "name": "results",
       "description": "Search results",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlayerTrack",
          ">"
         ]
        ]
       ]
      },
      {
       "name": "userID",
       "description": "Requested user ID",
       "optional": true,
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "CollectorData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "object with received data or error"
     },
     "meta": {
      "line": 441,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "init",
     "description": "Method for initializing module",
     "access": "private",
     "meta": {
      "line": 540,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "on",
     "description": "Method for listening Player events",
     "inherits": "PlayerEmitter#on",
     "inherited": true,
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Event Data",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "EventEmitter"
        ]
       ]
      ],
      "description": "EventEmitter Class"
     },
     "meta": {
      "line": 13,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    },
    {
     "name": "once",
     "description": "Method to listen for an Player event only once",
     "inherits": "PlayerEmitter#once",
     "inherited": true,
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Event Data",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "EventEmitter"
        ]
       ]
      ],
      "description": "EventEmitter Class"
     },
     "meta": {
      "line": 25,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    },
    {
     "name": "emit",
     "description": "Method for emits Player events",
     "inherits": "PlayerEmitter#emit",
     "inherited": true,
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "args",
       "description": "Event Args",
       "variable": true,
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Event emit status"
     },
     "meta": {
      "line": 37,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    }
   ],
   "events": [
    {
     "name": "ready",
     "description": "Emits when the module is ready",
     "params": [
      {
       "name": "player",
       "description": "Player instance",
       "type": [
        [
         [
          "Player"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 610,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "error",
     "description": "Emitted when a module can't do anything and gets an error",
     "params": [
      {
       "name": "channel",
       "description": "Error Channels",
       "optional": true,
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "channel.text",
       "description": "Discord Guild text Channel",
       "optional": true,
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "channel.voice",
       "description": "Discord Guild Voice Channel",
       "optional": true,
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      },
      {
       "name": "requested",
       "description": "Requested User",
       "type": [
        [
         [
          "User"
         ]
        ]
       ]
      },
      {
       "name": "method",
       "description": "Module method",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "error",
       "description": "Error object",
       "type": [
        [
         [
          "Error"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 618,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "addedTrack",
     "description": "Emitted when a new track is added to the server queue",
     "params": [
      {
       "name": "index",
       "description": "Track index",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "searchType",
       "description": "Search type",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "title",
       "description": "Track title",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "url",
       "description": "Track URL",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "thumbnail",
       "description": "Track thumbnail",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author",
       "description": "Track author object",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "author.name",
       "description": "Track author name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author.url",
       "description": "Track author channel URL",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channel",
       "description": "Track active channels",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "channel.text",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "channel.voice",
       "description": "Discord Guild Voice Channel",
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      },
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "requested",
       "description": "Requested track user object",
       "type": [
        [
         [
          "User"
         ]
        ]
       ]
      },
      {
       "name": "duration",
       "description": "Track duration",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "duration.hours",
       "description": "Track duration in hours",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "duration.minutes",
       "description": "Track duration in minutes",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "duration.seconds",
       "description": "Track duration in seconds",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 630,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "playingTrack",
     "description": "Emitted when a new track starts playing in the server queue",
     "params": [
      {
       "name": "index",
       "description": "Track index",
       "optional": true,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "searchType",
       "description": "Search type",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "title",
       "description": "Track title",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "url",
       "description": "Track URL",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "thumbnail",
       "description": "Track thumbnail",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author",
       "description": "Track author object",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "author.name",
       "description": "Track author name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author.url",
       "description": "Track author channel URL",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "channel",
       "description": "Track active channels",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "channel.text",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "channel.voice",
       "description": "Discord Guild Voice Channel",
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      },
      {
       "name": "guild",
       "description": "Discord Guild",
       "type": [
        [
         [
          "Guild"
         ]
        ]
       ]
      },
      {
       "name": "requested",
       "description": "Requested track user object",
       "type": [
        [
         [
          "User"
         ]
        ]
       ]
      },
      {
       "name": "duration",
       "description": "Track duration",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "duration.hours",
       "description": "Track duration in hours",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "duration.minutes",
       "description": "Track duration in minutes",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "duration.seconds",
       "description": "Track duration in seconds",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 653,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "createdPlaylist",
     "description": "Emitted when a new server playlist is created",
     "params": [
      {
       "name": "id",
       "description": "Playlist ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "title",
       "description": "Playlist Title",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author",
       "description": "Playlist Author ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "created",
       "description": "Playlist create timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "updated",
       "description": "Playlist update timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "duration",
       "description": "Playlist duration",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "lastPlaying",
       "description": "Playlist last playind timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "tracks",
       "description": "Playlist tracks array",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlaylistTrack",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 676,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "deletedPlaylist",
     "description": "Emitted when the server playlist is deleted",
     "params": [
      {
       "name": "id",
       "description": "Playlist ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "title",
       "description": "Playlist Title",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "author",
       "description": "Playlist Author ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "created",
       "description": "Playlist create timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "updated",
       "description": "Playlist update timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "duration",
       "description": "Playlist duration",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "lastPlaying",
       "description": "Playlist last playind timestamp",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "tracks",
       "description": "Playlist tracks array",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlaylistTrack",
          ">"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 690,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "queueStarted",
     "description": "Emitted when a new server queue is started",
     "params": [
      {
       "name": "channel",
       "description": "Queue active channels",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "channel.text",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "channel.voice",
       "description": "Discord Guild Voice Channel",
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      },
      {
       "name": "dispatcher",
       "description": "Guild Audio Dispatcher",
       "type": [
        [
         [
          "AudioPlayer"
         ]
        ]
       ]
      },
      {
       "name": "tracks",
       "description": "Guild Tracks Array",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlayerTrack",
          ">"
         ]
        ]
       ]
      },
      {
       "name": "connection",
       "description": "Discord Guild Client Voice Connection",
       "type": [
        [
         [
          "VoiceConnection"
         ]
        ]
       ]
      },
      {
       "name": "loop",
       "description": "Loop object",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "loop.track",
       "description": "Loop current track status",
       "type": [
        [
         [
          "boolean"
         ]
        ]
       ]
      },
      {
       "name": "loop.queue",
       "description": "Loop guild queue status",
       "type": [
        [
         [
          "boolean"
         ]
        ]
       ]
      },
      {
       "name": "volume",
       "description": "Guild queue playback volume",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "startStream",
       "description": "Timestamp start playing server queue",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "state",
       "description": "Queue playback status",
       "type": [
        [
         [
          "GuildQueueState"
         ]
        ]
       ]
      },
      {
       "name": "filter",
       "description": "Queue playback filter",
       "type": [
        [
         [
          "PlayerFilter"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 704,
      "file": "Player.ts",
      "path": "src"
     }
    },
    {
     "name": "queueEnded",
     "description": "Emitted when the server queue finishes playing",
     "params": [
      {
       "name": "channel",
       "description": "Queue active channels",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "channel.text",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      },
      {
       "name": "channel.voice",
       "description": "Discord Guild Voice Channel",
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      },
      {
       "name": "dispatcher",
       "description": "Guild Audio Dispatcher",
       "type": [
        [
         [
          "AudioPlayer"
         ]
        ]
       ]
      },
      {
       "name": "tracks",
       "description": "Guild Tracks Array",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "PlayerTrack",
          ">"
         ]
        ]
       ]
      },
      {
       "name": "connection",
       "description": "Discord Guild Client Voice Connection",
       "type": [
        [
         [
          "VoiceConnection"
         ]
        ]
       ]
      },
      {
       "name": "loop",
       "description": "Loop object",
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      },
      {
       "name": "loop.track",
       "description": "Loop current track status",
       "type": [
        [
         [
          "boolean"
         ]
        ]
       ]
      },
      {
       "name": "loop.queue",
       "description": "Loop guild queue status",
       "type": [
        [
         [
          "boolean"
         ]
        ]
       ]
      },
      {
       "name": "volume",
       "description": "Guild queue playback volume",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "startStream",
       "description": "Timestamp start playing server queue",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      },
      {
       "name": "state",
       "description": "Queue playback status",
       "type": [
        [
         [
          "GuildQueueState"
         ]
        ]
       ]
      },
      {
       "name": "filter",
       "description": "Queue playback filter",
       "type": [
        [
         [
          "PlayerFilter"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 723,
      "file": "Player.ts",
      "path": "src"
     }
    }
   ],
   "meta": {
    "line": 25,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlayerEmitter",
   "description": "Player Emitter Class",
   "access": "private",
   "methods": [
    {
     "name": "on",
     "description": "Method for listening Player events",
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Event Data",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "EventEmitter"
        ]
       ]
      ],
      "description": "EventEmitter Class"
     },
     "meta": {
      "line": 13,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    },
    {
     "name": "once",
     "description": "Method to listen for an Player event only once",
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Event Data",
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "EventEmitter"
        ]
       ]
      ],
      "description": "EventEmitter Class"
     },
     "meta": {
      "line": 25,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    },
    {
     "name": "emit",
     "description": "Method for emits Player events",
     "params": [
      {
       "name": "event",
       "description": "Event Name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "args",
       "description": "Event Args",
       "variable": true,
       "type": [
        [
         [
          "any"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "boolean"
        ]
       ]
      ],
      "description": "Event emit status"
     },
     "meta": {
      "line": 37,
      "file": "PlayerEmitter.ts",
      "path": "src"
     }
    }
   ],
   "meta": {
    "line": 4,
    "file": "PlayerEmitter.ts",
    "path": "src"
   }
  },
  {
   "name": "DatabaseManager",
   "description": "Player Database Manager Class",
   "construct": {
    "name": "DatabaseManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 36,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "config",
     "description": "Player Database Configuration",
     "type": [
      [
       [
        "DatabaseManagerConfiguration"
       ]
      ]
     ],
     "meta": {
      "line": 44,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "storage",
     "description": "Player Playlists Storage",
     "access": "private",
     "type": [
      [
       [
        "object"
       ]
      ]
     ],
     "meta": {
      "line": 54,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "get",
     "description": "Method to get database object",
     "examples": [
      "const storage = client.player.database.get();\rconst guildPlaylists = storage['GuildID'];\r\rconsole.log(guildPlaylists);"
     ],
     "returns": {
      "types": [
       [
        [
         "object"
        ]
       ]
      ],
      "description": "Database object"
     },
     "meta": {
      "line": 65,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "write",
     "description": "Method for writing data to the database",
     "examples": [
      "const storage = client.player.database.get();\rstorage['GuildID']['example'] = {};\r\rclient.player.database.write(storage);"
     ],
     "params": [
      {
       "name": "data",
       "description": "Database object",
       "optional": true,
       "type": [
        [
         [
          "object"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 80,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "initGuild",
     "description": "Allows you to initialize data for a single server",
     "examples": [
      "function getGuildStorage(guildID) {\r     // If there is no data, it will appear\r     client.player.database.initGuild(guildID);\r\r     const storage = client.player.database.get();\r\r     console.log(storage[guildID]);\r}\r\rgetGuildStorage('GuildID');"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "meta": {
      "line": 95,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "init",
     "description": "Method for module database initialization",
     "meta": {
      "line": 120,
      "file": "DatabaseManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 12,
    "file": "DatabaseManager.ts",
    "path": "src/managers"
   }
  },
  {
   "name": "FiltersManager",
   "description": "Player Filters Manager Class",
   "construct": {
    "name": "FiltersManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 29,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "storage",
     "description": "Player Filters Storage",
     "access": "private",
     "type": [
      [
       [
        "Collection",
        "<"
       ],
       [
        "string",
        ", "
       ],
       [
        "string",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 37,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "add",
     "description": "Allows you to add your custom filter to the storage module",
     "examples": [
      "const addFilterData = await client.player.filters.add('nightcore', 'asetrate=48000*1.25,aresample=48000,bass=g=5');\rif(addFilterData?.status) return message.channel.send({ content: 'Filter nightcore installed!' });"
     ],
     "params": [
      {
       "name": "key",
       "description": "Filter name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Filter FFmpeg value",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "The presence of an added filter in the storage or an object with an error"
     },
     "meta": {
      "line": 48,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "isExists",
     "description": "Allows you to check the filter key for validity",
     "examples": [
      "const isValidFilter = await client.player.filters.isExists('nightcore');\rif(!isValidFilter) return message.channel.send({ content: 'Filter nightcore is invalid!' });"
     ],
     "params": [
      {
       "name": "key",
       "description": "Filter name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "Key filter search result"
     },
     "meta": {
      "line": 73,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "get",
     "description": "Allows you to get the module's filter object",
     "examples": [
      "const playerFilter = await client.player.filters.get('nightcore');\rif(playerFilter?.name && playerFilter?.value) return message.channel.send({ content: `Filter name: ${playerFilter.name} | Filter value: ${playerFilter.value}` });"
     ],
     "params": [
      {
       "name": "key",
       "description": "Filter name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "PlayerFilter",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Filter object (name & value) or object with an error"
     },
     "meta": {
      "line": 92,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "list",
     "description": "Allows you to get a collection of module filters (including custom filters)",
     "examples": [
      "const playerFilters = await client.player.filters.list();\rreturn message.channel.send({ content: `Filters count: ${playerFilters.size}` });"
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Collection",
         "<"
        ],
        [
         "string",
         ", "
        ],
        [
         "string",
         ">>"
        ]
       ]
      ],
      "description": "Filters collection"
     },
     "meta": {
      "line": 114,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "delete",
     "description": "Allows you to remove filters from the collection",
     "examples": [
      "const deleteFilterData = await client.player.filters.delete('nightcore');\rif(deleteFilterData?.status) return message.channel.send({ content: 'Filter nightcore deleted from module storage!' });"
     ],
     "params": [
      {
       "name": "key",
       "description": "Filter name",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Filter removal status or error object"
     },
     "meta": {
      "line": 129,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "init",
     "description": "Method for initializing module filters storage",
     "access": "private",
     "meta": {
      "line": 150,
      "file": "FiltersManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 10,
    "file": "FiltersManager.ts",
    "path": "src/managers"
   }
  },
  {
   "name": "PlaylistsManager",
   "description": "Player Playlists Manager Class",
   "construct": {
    "name": "PlaylistsManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 28,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "create",
     "description": "Allows you to create new playlists for the server",
     "examples": [
      "const createPlaylistData = await client.player.playlists.create('GuildID', {\r     title: 'Test Playlist #1',\r     author: 'UserID',\r\r     track: {\r         title: 'Xtrullor - Samsara',\r         url: 'https://youtube.com/watch?v=Vt2TeOptLxE'\r     }\r})\r\rif(createPlaylistData?.title) return message.channel.send({ content: `Playlist with title ${createPlaylistData.title} created!` });"
     ],
     "emits": [
      "Player#event:createdPlaylist"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Create playlist data",
       "type": [
        [
         [
          "CreatePlaylistData"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "GuildPlaylist",
         ">"
        ]
       ]
      ],
      "description": "Created playlist data"
     },
     "meta": {
      "line": 37,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "addTrack",
     "description": "Allows you to add new tracks to server playlists",
     "examples": [
      "const addTrackToPlaylistData = await client.player.playlists.addTrack('GuildID', {\r     id: 'PlaylistID',\r\r     track: {\r         title: 'Xtrullor - Samsara',\r         url: 'https://youtube.com/watch?v=Vt2TeOptLxE'\r     }\r})\r\rif(addTrackToPlaylistData?.title) return message.channel.send({ content: `Track Xtrullor - Samsara added to playlist!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "data",
       "description": "Playlist Data",
       "type": [
        [
         [
          "AddPlaylistData"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "GuildPlaylist",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Changed playlist or object with an error"
     },
     "meta": {
      "line": 91,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "play",
     "description": "Allows you to play a server playlist",
     "examples": [
      "client.player.playlists.play('GuildID', 'PlaylistID', message.member, message.channel);"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "playlistID",
       "description": "Guild Playlist ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "member",
       "description": "Discord Guild Member",
       "type": [
        [
         [
          "GuildMember"
         ]
        ]
       ]
      },
      {
       "name": "channel",
       "description": "Discord Guild Text Channel",
       "type": [
        [
         [
          "TextChannel"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "GuildPlaylist",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Guild playlist data or object with an error"
     },
     "meta": {
      "line": 143,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "removeTrack",
     "description": "Allows you to delete tracks by their positions in the playlist",
     "examples": [
      "// Delete first track from playlist\rconst removeTrackFromPlaylistData = await client.player.playlists.removeTrack('GuildID', 'PlaylistID', 0);"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "playlistID",
       "description": "Guild Playlist ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "Track index in playlist",
       "optional": true,
       "default": 0,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "GuildPlaylist",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Changed playlist or object with an error"
     },
     "meta": {
      "line": 184,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "delete",
     "description": "Allows you to delete server playlists by ID",
     "examples": [
      "const deletedPlaylisData = await client.player.playlists.delete('GuildID', 'PlaylistID');\r\rif(deletedPlaylisData?.title) return message.channel.send({ content: `Playlist with title ${deletedPlaylisData.title} deleted!` });"
     ],
     "emits": [
      "Player#event:deletedPlaylist"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "playlistID",
       "description": "Guild Playlist ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "GuildPlaylist",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Deleted playlist or object with an error"
     },
     "meta": {
      "line": 224,
      "file": "PlaylistsManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 11,
    "file": "PlaylistsManager.ts",
    "path": "src/managers"
   }
  },
  {
   "name": "QueueManager",
   "description": "Player Queue Manager Class",
   "construct": {
    "name": "QueueManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 41,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "storage",
     "description": "Player Queue Storage",
     "access": "private",
     "type": [
      [
       [
        "Collection",
        "<"
       ],
       [
        "string",
        ", "
       ],
       [
        "PlayerQueue",
        ">"
       ]
      ]
     ],
     "meta": {
      "line": 49,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "add",
     "description": "Allows you to add tracks to the server queue",
     "examples": [
      "const searchData = client.player.search('Xtrullor - Samsara', message.member, message.channel);\rif(searchData[0]?.title) client.player.queue.add(searchData[0]);"
     ],
     "emits": [
      "Player#event:addedTrack",
      "Player#event:queueStarted"
     ],
     "params": [
      {
       "name": "track",
       "description": "Track info",
       "type": [
        [
         [
          "PlayerTrack"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "boolean",
         ">"
        ]
       ]
      ],
      "description": "Status of adding a track to the server queue"
     },
     "meta": {
      "line": 58,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "setState",
     "description": "Allows you to set the state of the server queue (pause and resume)",
     "examples": [
      "// Pause command\rconst setStateData = await client.player.queue.setState('GuildID', GuildQueueState.PAUSE);\r\r// Resume command\rconst setStateData = await client.player.queue.setState('GuildID', GuildQueueState.PLAYING);\r\rconsole.log(setStateData);"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "type",
       "description": "State type",
       "type": [
        [
         [
          "GuildQueueState"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Installation status or object with an error"
     },
     "meta": {
      "line": 122,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "get",
     "description": "Allows you to get the queue object for the server",
     "examples": [
      "const guildQueue = await client.player.queue.get('GuildID');\rif(guildQueue?.tracks) return message.channel.send({ content: `${guildQueue.tracks.length} tracks found in server queue!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "PlayerQueue",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Queue object for server or `null`"
     },
     "meta": {
      "line": 175,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "progress",
     "description": "Allows you to create a progress bar for playing the current track in the server queue",
     "examples": [
      "const progressData = await client.player.queue.pregress('GuildID');\rif(progressData?.bar) return message.channel.send({ content: `[${progressData.percents}] ${progressData.bar}` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "ProgressData",
         "<"
        ],
        [
         "ProgressData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Progress bar data or an object with an error"
     },
     "meta": {
      "line": 197,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "streamInfo",
     "description": "Allows you to find out information about the current stream",
     "examples": [
      "const streamData = await client.player.queue.streamInfo('GuildID');\rif(streamData?.state) return message.channel.send({ content: `Stream filter: ${streamData.filter.name}\\nStream ${state: streamData.state.includes(GuildQueueState.PLAYING) ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'}` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "StreamData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "General information about the current stream"
     },
     "meta": {
      "line": 248,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "trackInfo",
     "description": "Allows you to get an object with information about the track",
     "examples": [
      "const trackData = await client.player.queue.trackInfo('GuildID', 0);\rif(trackData?.title) return message.channel.send({ content: `Track title: ${trackData.title}\\ntrack URL: ${trackData.url}` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "Track index",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "PlayerTrack",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "object with track information or with an error"
     },
     "meta": {
      "line": 272,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "setFilter",
     "description": "Allows you to set a playback filter for the queue",
     "examples": [
      "const setFilterData = await client.player.queue.setFilter('GuildID', 'nightcore');\rif(setFilterData?.name) return message.channel.send({ content: `Filter '${setFilterData.name}' successfully installed!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "filter",
       "description": "Filter type",
       "type": [
        [
         [
          "Filter"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "PlayerFilter",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Set filter data or an object with an error"
     },
     "meta": {
      "line": 298,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "setLoop",
     "description": "Allows you to set the looping of a queue or a single track",
     "examples": [
      "// Loop only first track\rconst setLoopData = await client.player.queue.setLoop('GuildID', Loop.TRACK);\r\r// Loop all queue tracks\rconst setLoopData = await client.player.queue.setLoop('GuildID', Loop.QUEUE);\r\rconsole.log(setLoopData);"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "type",
       "description": "Loop type",
       "type": [
        [
         [
          "Loop"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "LoopData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Loop setup status or object in error"
     },
     "meta": {
      "line": 328,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "setVolume",
     "description": "Allows you to set the playback volume of the server queue",
     "examples": [
      "const setVolumeData = await client.player.queue.setVolume('GuildID', 10);\rif(setVolumeData?.status) return message.channel.send({ content: `Volume playback successfully installed on 10!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Volume value",
       "optional": true,
       "default": 5,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Server queue playback volume change status or object with an error"
     },
     "meta": {
      "line": 383,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "skipTrack",
     "description": "Allows you to skip server tracks",
     "examples": [
      "const skipData = await client.player.queue.skipTrack('GuildID');\rif(skipData?.next) return message.channel.send({ content: `Skip track '${skipData.current}' and start playing track '${skipData.next}'!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "SkipData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Object with current and next track or error"
     },
     "meta": {
      "line": 412,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "removeTrack",
     "description": "Allows you to delete tracks by index in the server queue",
     "examples": [
      "const removeTrackData = await client.player.queue.removetrack('GuildID', 0);\rif(!removeTrackData?.error) return message.channel.send({ content: `` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "index",
       "description": "Track index",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "RemoveTrackData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Updated track list for the server or an object with an error"
     },
     "meta": {
      "line": 457,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "seek",
     "description": "Allows you to rewind the current track in the queue",
     "examples": [
      "// Seek 10 seconds\rconst seekData = await client.player.queue.seek('GuildID', 10);\rif(seekData?.status) return message.channel.send({ content: `The track has been successfully rewound by 10 seconds!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      },
      {
       "name": "value",
       "description": "Seek value",
       "optional": true,
       "default": 5,
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Installation status or object with an error"
     },
     "meta": {
      "line": 488,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "shuffle",
     "description": "Allows you to shuffle tracks in the server queue",
     "examples": [
      "const shuffleData = await client.player.queue.shuffle('GuildID');\rif(!shuffleData?.error) return message.channel.send({ content: `10 tracks successfully shuffled!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "Array",
         "<"
        ],
        [
         "PlayerTrack",
         ">|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Shuffled list of tracks in the queue"
     },
     "meta": {
      "line": 520,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "stop",
     "description": "Allows you to end playback of the server queue",
     "examples": [
      "const stopData = await client.player.queue.stop('GuildID);\rif(stopData?.status) return message.channel.send({ content: `Server queue playback successfully stopped!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Presence of a queue for a server in storage or an object with an error"
     },
     "meta": {
      "line": 552,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "delete",
     "description": "Allows you to clear the server queue",
     "examples": [
      "const deleteData = client.player.queue.delete('GuildID');\rif(deleteData?.status) return message.channel.send({ content: `The server queue has been successfully removed from the repository!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "DefaultData",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Server queue cleanup status or object with an error"
     },
     "meta": {
      "line": 576,
      "file": "QueueManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 22,
    "file": "QueueManager.ts",
    "path": "src/managers"
   }
  },
  {
   "name": "UtilsManager",
   "description": "Player Utils Manager Class",
   "construct": {
    "name": "UtilsManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 26,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "formatnumbers",
     "description": "Allows you to format numbers in a familiar form for people",
     "examples": [
      "const formatData = client.player.utils.formatnumbers([1, 2, 30]);\r\r// Result: ['01', '02', '30']\rconsole.log(formatData);"
     ],
     "params": [
      {
       "name": "data",
       "description": "numbers Array",
       "type": [
        [
         [
          "Array",
          "<"
         ],
         [
          "number",
          ">"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Array",
         "<"
        ],
        [
         "string",
         ">"
        ]
       ]
      ],
      "description": "Returns an array of formatted numbers"
     },
     "meta": {
      "line": 35,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "formatDuration",
     "description": "Allows you to format the duration to the usual form",
     "examples": [
      "const formatData = client.player.utils.formatDuration(300);\r\r// Result: '00:05:00'\rconsole.log(formatData);"
     ],
     "params": [
      {
       "name": "value",
       "description": "Duration value",
       "type": [
        [
         [
          "number"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "string"
        ]
       ]
      ],
      "description": "Formatted duration value"
     },
     "meta": {
      "line": 58,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "checkOptions",
     "description": "Method for checking module options",
     "params": [
      {
       "name": "options",
       "description": "Module options",
       "optional": true,
       "type": [
        [
         [
          "PlayerOptions"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "PlayerOptions"
        ]
       ]
      ],
      "description": "Correct module options"
     },
     "meta": {
      "line": 83,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "createEmptyProgress",
     "description": "Allows you to create an empty progress bar",
     "examples": [
      "const progressBar = client.player.utils.createEmptyProgress();\r\r// Result: 'üîò‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨'\rconsole.log(progressBar);"
     ],
     "returns": {
      "types": [
       [
        [
         "string"
        ]
       ]
      ],
      "description": "Empty progress bar"
     },
     "meta": {
      "line": 195,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "getUniqueID",
     "description": "Allows you to get a unique ID",
     "examples": [
      "const id = client.player.utils.getUniqueID();\r\r// Result: '632342263918468'\rconsole.log(id);"
     ],
     "returns": {
      "types": [
       [
        [
         "string"
        ]
       ]
      ],
      "description": "Unique ID"
     },
     "meta": {
      "line": 216,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "getTrackDuration",
     "description": "Allows you to find out the duration of the track",
     "examples": [
      "const trackDurationData = await client.player.utils.getTrackDuration('https://youtube.com/watch?v=Vt2TeOptLxE');\r\r// Result: 307\rconsole.log(trackDurationData);"
     ],
     "params": [
      {
       "name": "url",
       "description": "Track url",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "number",
         ">"
        ]
       ]
      ],
      "description": "Track duration"
     },
     "meta": {
      "line": 239,
      "file": "UtilsManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 10,
    "file": "UtilsManager.ts",
    "path": "src/managers"
   }
  },
  {
   "name": "VoiceManager",
   "description": "Player Voice Manager Class",
   "construct": {
    "name": "VoiceManager",
    "params": [
     {
      "name": "player",
      "description": "Player Class",
      "type": [
       [
        [
         "Player"
        ]
       ]
      ]
     }
    ]
   },
   "props": [
    {
     "name": "player",
     "description": "Player Class",
     "access": "private",
     "type": [
      [
       [
        "Player"
       ]
      ]
     ],
     "meta": {
      "line": 28,
      "file": "VoiceManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "methods": [
    {
     "name": "join",
     "description": "Allows the bot to join a voice channel on the server",
     "examples": [
      "const channel = message.guild?.channels.cache.get('ChannelID');\r\rif(channel && channel.isVoiceBased()) await client.player.voice.join(channel);"
     ],
     "params": [
      {
       "name": "channel",
       "description": "Discord Guild Voice Channel ID",
       "type": [
        [
         [
          "VoiceChannel"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "VoiceConnection",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Voice connection or error object"
     },
     "meta": {
      "line": 37,
      "file": "VoiceManager.ts",
      "path": "src/managers"
     }
    },
    {
     "name": "leave",
     "description": "Allows the bot to leave the server's voice channel",
     "examples": [
      "const guildConnection = await client.player.voice.leave('GuildID');\r\rif(guildConnection?.joinConfig) return message.channel.send({ content: `Client leave from ${message.guild.channels.cache.get(guildConnection.joinConfig.channelId)} channel!` });"
     ],
     "params": [
      {
       "name": "guildID",
       "description": "Discord Guild ID",
       "type": [
        [
         [
          "string"
         ]
        ]
       ]
      }
     ],
     "returns": {
      "types": [
       [
        [
         "Promise",
         "<"
        ],
        [
         "VoiceConnection",
         "|"
        ],
        [
         "ErrorData",
         ">"
        ]
       ]
      ],
      "description": "Connection or error object"
     },
     "meta": {
      "line": 63,
      "file": "VoiceManager.ts",
      "path": "src/managers"
     }
    }
   ],
   "meta": {
    "line": 11,
    "file": "VoiceManager.ts",
    "path": "src/managers"
   }
  }
 ],
 "interfaces": [],
 "typedefs": [
  {
   "name": "PlayerOptions",
   "description": "Module Options",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "autoAddingTracks",
     "description": "Automatic addition of tracks to the queue (excluding playlists)",
     "optional": true,
     "default": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "searchResultsLimit",
     "description": "number of results to be returned when searching for tracks by title",
     "optional": true,
     "default": 10,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "synchronLoop",
     "description": "Automatic synchronization of `loop.track` and `loop.queue` options",
     "optional": true,
     "default": true,
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "defaultVolume",
     "description": "Default server queue playback volume",
     "optional": true,
     "default": 5,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "databaseConfig",
     "description": "Database configuration object",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "path",
     "description": "Default path to module database file",
     "optional": true,
     "default": "./dpm.playlists.json",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "checkInterval",
     "description": "Default interval for checking and updating the module database",
     "optional": true,
     "default": "5s",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "progressConfig",
     "description": "Progress bar configuration object",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "size",
     "description": "Progress bar size",
     "optional": true,
     "default": 11,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "line",
     "description": "Progress bar line",
     "optional": true,
     "default": "‚ñ¨",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "slider",
     "description": "Progress bar slider",
     "optional": true,
     "default": "üîò",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig",
     "description": "Collectors configuration object",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.message",
     "description": "Message collector configuration object",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.message.time",
     "description": "Message collector run time",
     "optional": true,
     "default": "1m",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.message.attempts",
     "description": "Maximum number of attempts to select a track",
     "optional": true,
     "default": 1,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.reaction",
     "description": "Reaction collector configuration object",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.reaction.time",
     "description": "Reaction collector ran time",
     "optional": true,
     "default": "30s",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.reaction.attempts",
     "description": "Maximum number of attempts to select a track",
     "optional": true,
     "default": 1,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "collectorsConfig.reaction.reactions",
     "description": "Array react for collector",
     "optional": true,
     "default": "[]",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "string",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 558,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "Filter",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "3D",
     "description": "3D filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "bassboost",
     "description": "Bassboost filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "echo",
     "description": "Echo filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "fadein",
     "description": "Fadein filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "flanger",
     "description": "Flanger filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "gate",
     "description": "Gate filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "haas",
     "description": "Haas filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "karaoke",
     "description": "Karaoke filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "nightcore",
     "description": "Nightcore filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "reverse",
     "description": "Reverse filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "vaporwave",
     "description": "Vaporwave filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "mcompand",
     "description": "MCompand filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "phaser",
     "description": "Phaser filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "tremolo",
     "description": "Tremolo filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "surround",
     "description": "Surround filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "slowed",
     "description": "Slowed filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "earwax",
     "description": "Earwax filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "underwater",
     "description": "Underwater filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "clear",
     "description": "Clear filter",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 584,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "DefaultData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "status",
     "description": "Operation progress status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 746,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlayerTrack",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "index",
     "description": "Track index",
     "optional": true,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "searchType",
     "description": "Search type",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "title",
     "description": "Track title",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "url",
     "description": "Track URL",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "thumbnail",
     "description": "Track thumbnail",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "author",
     "description": "Track author object",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "author.name",
     "description": "Track author name",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "author.url",
     "description": "Track author channel URL",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "channel",
     "description": "Track active channels",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "channel.text",
     "description": "Discord Guild Text Channel",
     "type": [
      [
       [
        "TextChannel"
       ]
      ]
     ]
    },
    {
     "name": "channel.voice",
     "description": "Discord Guild Voice Channel",
     "type": [
      [
       [
        "VoiceChannel"
       ]
      ]
     ]
    },
    {
     "name": "guild",
     "description": "Discord Guild",
     "type": [
      [
       [
        "Guild"
       ]
      ]
     ]
    },
    {
     "name": "requested",
     "description": "Requested track user object",
     "type": [
      [
       [
        "User"
       ]
      ]
     ]
    },
    {
     "name": "duration",
     "description": "Track duration",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "duration.hours",
     "description": "Track duration in hours",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "duration.minutes",
     "description": "Track duration in minutes",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "duration.seconds",
     "description": "Track duration in seconds",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 752,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlayerQueue",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "channel",
     "description": "Queue active channels",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "channel.text",
     "description": "Discord Guild Text Channel",
     "type": [
      [
       [
        "TextChannel"
       ]
      ]
     ]
    },
    {
     "name": "channel.voice",
     "description": "Discord Guild Voice Channel",
     "type": [
      [
       [
        "VoiceChannel"
       ]
      ]
     ]
    },
    {
     "name": "dispatcher",
     "description": "Guild Audio Dispatcher",
     "type": [
      [
       [
        "AudioPlayer"
       ]
      ]
     ]
    },
    {
     "name": "tracks",
     "description": "Guild Tracks Array",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "PlayerTrack",
        ">"
       ]
      ]
     ]
    },
    {
     "name": "connection",
     "description": "Discord Guild Client Voice Connection",
     "type": [
      [
       [
        "VoiceConnection"
       ]
      ]
     ]
    },
    {
     "name": "loop",
     "description": "Loop object",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "loop.track",
     "description": "Loop current track status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "loop.queue",
     "description": "Loop guild queue status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "volume",
     "description": "Guild queue playback volume",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "startStream",
     "description": "Timestamp start playing server queue",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "state",
     "description": "Queue playback status",
     "type": [
      [
       [
        "GuildQueueState"
       ]
      ]
     ]
    },
    {
     "name": "filter",
     "description": "Queue playback filter",
     "type": [
      [
       [
        "PlayerFilter"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 774,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "LyricsData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "query",
     "description": "Search query",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "result",
     "description": "Lyrics content",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 792,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlayerFilter",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "name",
     "description": "Filter name",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "value",
     "description": "Filter value",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 799,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlaylistTrack",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "url",
     "description": "Track URL",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "title",
     "description": "Track Title",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 806,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "CreatePlaylistData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "title",
     "description": "Playlist Title",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "author",
     "description": "Playlist Author ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "track",
     "description": "Playlist track object",
     "type": [
      [
       [
        "PlaylistTrack"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 813,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "AddPlaylistData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "Playlist ID",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "track",
     "description": "Playlist track object",
     "type": [
      [
       [
        "PlaylistTrack"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 821,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "GuildPlaylist",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "id",
     "description": "Playlist ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "title",
     "description": "Playlist Title",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "author",
     "description": "Playlist Author ID",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "created",
     "description": "Playlist create timestamp",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "updated",
     "description": "Playlist update timestamp",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "duration",
     "description": "Playlist duration",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "lastPlaying",
     "description": "Playlist last playind timestamp",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "tracks",
     "description": "Playlist tracks array",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "PlaylistTrack",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 828,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "ErrorData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "error",
     "description": "Error object",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "error.code",
     "description": "Error code",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "error.message",
     "description": "Error message",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 841,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "SkipData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "current",
     "description": "Current track object",
     "type": [
      [
       [
        "PlayerTrack"
       ]
      ]
     ]
    },
    {
     "name": "next",
     "description": "Next track object",
     "type": [
      [
       [
        "PlayerTrack"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 849,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "CollectorData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "index",
     "description": "Collected index",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "track",
     "description": "User selected track object",
     "type": [
      [
       [
        "PlayerTrack"
       ]
      ]
     ]
    },
    {
     "name": "data",
     "description": "List of available tracks",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "PlayerTrack",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 856,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "ProgressData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "bar",
     "description": "Progress bar",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "percents",
     "description": "Progress percents",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 864,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "StreamData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "loop",
     "description": "Loop object",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "loop.track",
     "description": "Loop current track status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "loop.queue",
     "description": "Loop guild queue status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "filter",
     "description": "Stream filter",
     "type": [
      [
       [
        "PlayerFilter"
       ]
      ]
     ]
    },
    {
     "name": "state",
     "description": "Stream status value",
     "type": [
      [
       [
        "GuildQueueState"
       ]
      ]
     ]
    },
    {
     "name": "volume",
     "description": "Stream volume value",
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "streamTime",
     "description": "Stream duration object",
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "streamTime.days",
     "description": "Stream duration in days",
     "type": [
      [
       [
        "string"
       ]
      ],
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "streamTime.hours",
     "description": "Stream duration in hours",
     "type": [
      [
       [
        "string"
       ]
      ],
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "streamTime.minutes",
     "description": "Stream duration in minutes",
     "type": [
      [
       [
        "string"
       ]
      ],
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "streamTime.seconds",
     "description": "Stream duration in seconds",
     "type": [
      [
       [
        "string"
       ]
      ],
      [
       [
        "number"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 871,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "LoopData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "track",
     "description": "Loop track status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    },
    {
     "name": "queue",
     "description": "Loop queue status",
     "type": [
      [
       [
        "boolean"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 887,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "RemoveTrackData",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "deleted",
     "description": "Remove track object",
     "type": [
      [
       [
        "PlayerTrack"
       ]
      ]
     ]
    },
    {
     "name": "tracks",
     "description": "Updated tracks list",
     "type": [
      [
       [
        "Array",
        "<"
       ],
       [
        "PlayerTrack",
        ">"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 894,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "PlayerError",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "channel",
     "description": "Error Channels",
     "optional": true,
     "type": [
      [
       [
        "object"
       ]
      ]
     ]
    },
    {
     "name": "channel.text",
     "description": "Discord Guild text Channel",
     "optional": true,
     "type": [
      [
       [
        "TextChannel"
       ]
      ]
     ]
    },
    {
     "name": "channel.voice",
     "description": "Discord Guild Voice Channel",
     "optional": true,
     "type": [
      [
       [
        "VoiceChannel"
       ]
      ]
     ]
    },
    {
     "name": "requested",
     "description": "Requested User",
     "type": [
      [
       [
        "User"
       ]
      ]
     ]
    },
    {
     "name": "method",
     "description": "Module method",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "error",
     "description": "Error object",
     "type": [
      [
       [
        "Error"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 901,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "StreamOptions",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "seek",
     "description": "Seek value",
     "optional": true,
     "default": 0,
     "type": [
      [
       [
        "number"
       ]
      ]
     ]
    },
    {
     "name": "filter",
     "description": "Filter value",
     "optional": true,
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 912,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "DatabaseManagerConfiguration",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "path",
     "description": "Default path to module database file",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "checkInterval",
     "description": "Default interval for checking and updating the module database",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 919,
    "file": "Player.ts",
    "path": "src"
   }
  },
  {
   "name": "Collector",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "MESSAGE",
     "description": "Message collector",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "REACTION",
     "description": "Reactions collector",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 1,
    "file": "PlayerEnums.ts",
    "path": "src"
   }
  },
  {
   "name": "Events",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "READY",
     "description": "Player ready event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "ERROR",
     "description": "Player error event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "TRACK_ADD",
     "description": "Player 'addedTrack' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "TRACK_PLAYING",
     "description": "Player 'playingTrack' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "PLAYLIST_CREATED",
     "description": "Player 'createdPlaylist' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "PLAYLIST_DELETED",
     "description": "Player 'deletedPlaylist' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "QUEUE_STARTED",
     "description": "Player 'queueStarted' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "QUEUE_ENDED",
     "description": "Player 'queueEnded' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "QUEUE_STATE",
     "description": "Player 'queueStateChange' event",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 12,
    "file": "PlayerEnums.ts",
    "path": "src"
   }
  },
  {
   "name": "GuildQueueState",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "PAUSED",
     "description": "Playback is paused (waiting to be restored)",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "PLAYING",
     "description": "Playback is active and not stopped",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 37,
    "file": "PlayerEnums.ts",
    "path": "src"
   }
  },
  {
   "name": "Loop",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "QUEUE",
     "description": "Loop all tracks in queue",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "TRACK",
     "description": "Loop only current track",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 48,
    "file": "PlayerEnums.ts",
    "path": "src"
   }
  },
  {
   "name": "Search",
   "type": [
    [
     [
      "object"
     ]
    ]
   ],
   "props": [
    {
     "name": "URL",
     "description": "Search url value",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    },
    {
     "name": "TITLE",
     "description": "Search title value",
     "type": [
      [
       [
        "string"
       ]
      ]
     ]
    }
   ],
   "meta": {
    "line": 59,
    "file": "PlayerEnums.ts",
    "path": "src"
   }
  }
 ],
 "externals": []
}